'''
Brian simulator compliant Python export for:

Components:
    Lavrentovich2008_Ca_Oscillations_0 (Type: Lavrentovich2008_Ca_Oscillations:  vin=0.05 (none) kout=0.5 (none) vM3=40.0 (none) k_CaA=0.15 (none) n=2.02 (none) k_CaI=0.15 (none) m=2.2 (none) kip3=0.1 (none) vM2=15.0 (none) k2=0.1 (none) kf=0.5 (none) vp=0.05 (none) kp=0.3 (none) kdeg=0.08 (none) compartment=1.0 (none) ER=1.0 (none) init_X=0.1 (none) init_Y=1.5 (none) init_Z=0.1 (none) tscale=1.0 (SI per_time))
    sim1 (Type: Simulation:  length=1000.0 (SI time) step=0.01 (SI time))

'''
'''
    This Brian file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.1.2
         org.neuroml.model   v1.0.7
         jLEMS               v0.9.5.2
'''
from brian import *

from math import *

# Adding simulation Component(id=sim1 type=Simulation) of network: Lavrentovich2008_Ca_Oscillations_0 (Type: Lavrentovich2008_Ca_Oscillations:  vin=0.05 (none) kout=0.5 (none) vM3=40.0 (none) k_CaA=0.15 (none) n=2.02 (none) k_CaI=0.15 (none) m=2.2 (none) kip3=0.1 (none) vM2=15.0 (none) k2=0.1 (none) kf=0.5 (none) vp=0.05 (none) kp=0.3 (none) kdeg=0.08 (none) compartment=1.0 (none) ER=1.0 (none) init_X=0.1 (none) init_Y=1.5 (none) init_Z=0.1 (none) tscale=1.0 (SI per_time))

compartment = 1.0 
ER = 1.0 
init_X = 0.1 
init_Y = 1.5 
init_Z = 0.1 
tscale = 1.0 * 1/second 
vin = 0.05 
kout = 0.5 
vM3 = 40.0 
k_CaA = 0.15 
n = 2.02 
k_CaI = 0.15 
m = 2.2 
kip3 = 0.1 
vM2 = 15.0 
k2 = 0.1 
kf = 0.5 
vp = 0.05 
kp = 0.3 
kdeg = 0.08 

eqs=Equations('''
    dY/dt = (tscale * ((0 - (1 * rate__R3)) + (rate__R4 - rate__R5))) :  1
    dX/dt = (tscale * (((rate__R1 - rate__R2) + (rate__R3 - rate__R4)) + rate__R5)) :  1
    dZ/dt = (tscale * (rate__R6 - rate__R7)) :  1
    rate__R1 = (compartment * vin) :  1
    rate__R2 = ((compartment * kout) * (X / compartment)) :  1
    rate__R3 = ((((((ER * 4) * vM3) * (k_CaA ** n)) * (((X / compartment) ** n) / ((((X / compartment) ** n) + (k_CaA ** n)) * (((X / compartment) ** n) + (k_CaI ** n))))) * (((Z / compartment) ** m) / (((Z / compartment) ** m) + (kip3 ** m)))) * (((Y / ER) / ER) - (X / compartment))) :  1
    rate__R4 = ((compartment * vM2) * (((X / compartment) ** 2) / (((X / compartment) ** 2) + (k2 ** 2)))) :  1
    rate__R5 = ((ER * kf) * (((Y / ER) / ER) - (X / compartment))) :  1
    rate__R6 = ((compartment * vp) * (((X / compartment) ** 2) / (((X / compartment) ** 2) + (kp ** 2)))) :  1
    rate__R7 = ((compartment * kdeg) * (Z / compartment)) :  1
''')

OneComponentPop = NeuronGroup(1, model=eqs)
OneComponentPop.X = init_X
OneComponentPop.Y = init_Y
OneComponentPop.Z = init_Z

# Display: Component(id=disp1 type=Display)
trace_disp1_ls_X = StateMonitor(OneComponentPop,'X',record=[0]) # ls_X (Type: Line:  scale=1.0 (???null) timeScale=1.0 (???null))
trace_disp1_ls_Y = StateMonitor(OneComponentPop,'Y',record=[0]) # ls_Y (Type: Line:  scale=1.0 (???null) timeScale=1.0 (???null))
trace_disp1_ls_Z = StateMonitor(OneComponentPop,'Z',record=[0]) # ls_Z (Type: Line:  scale=1.0 (???null) timeScale=1.0 (???null))

defaultclock.dt = 0.01*second
run(1000.0*second)

# Display: Component(id=disp1 type=Display)
figure("Simulation of SBML model: Lavrentovich2008_Ca_Oscillations from file: BIOMD0000000184.xml")
plot(trace_disp1_ls_X.times/second,trace_disp1_ls_X[0], color="#000000")
plot(trace_disp1_ls_Y.times/second,trace_disp1_ls_Y[0], color="#ff0000")
plot(trace_disp1_ls_Z.times/second,trace_disp1_ls_Z[0], color="#00ff00")
show()
