TITLE Mod file for component: Component(id=Lavrentovich2008_Ca_Oscillations_0 type=Lavrentovich2008_Ca_Oscillations)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.6.0
         org.neuroml.model   v1.6.0
         jLEMS               v0.10.0

ENDCOMMENT

NEURON {
    POINT_PROCESS Lavrentovich2008_Ca_Oscillations_0
    RANGE vin                               : parameter
    RANGE kout                              : parameter
    RANGE vM3                               : parameter
    RANGE k_CaA                             : parameter
    RANGE n                                 : parameter
    RANGE k_CaI                             : parameter
    RANGE m                                 : parameter
    RANGE kip3                              : parameter
    RANGE vM2                               : parameter
    RANGE k2                                : parameter
    RANGE kf                                : parameter
    RANGE vp                                : parameter
    RANGE kp                                : parameter
    RANGE kdeg                              : parameter
    RANGE tscale                            : parameter
    RANGE compartment                       : parameter
    RANGE ER                                : parameter
    RANGE init_X                            : parameter
    RANGE init_Y                            : parameter
    RANGE init_Z                            : parameter
    RANGE rate__R1                          : derived variable
    RANGE rate__R2                          : derived variable
    RANGE rate__R3                          : derived variable
    RANGE rate__R4                          : derived variable
    RANGE rate__R5                          : derived variable
    RANGE rate__R6                          : derived variable
    RANGE rate__R7                          : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    vin = 0.05 
    kout = 0.5 
    vM3 = 40 
    k_CaA = 0.15 
    n = 2.02 
    k_CaI = 0.15 
    m = 2.2 
    kip3 = 0.1 
    vM2 = 15 
    k2 = 0.1 
    kf = 0.5 
    vp = 0.05 
    kp = 0.3 
    kdeg = 0.08 
    tscale = 0.001 (kHz)
    compartment = 1 
    ER = 1 
    init_X = 0.1 
    init_Y = 1.5 
    init_Z = 0.1 
}

ASSIGNED {
    
    rate__R1                               : derived variable
    
    rate__R2                               : derived variable
    
    rate__R3                               : derived variable
    
    rate__R4                               : derived variable
    
    rate__R5                               : derived variable
    
    rate__R6                               : derived variable
    
    rate__R7                               : derived variable
    rate_X (/ms)
    rate_Y (/ms)
    rate_Z (/ms)
    
}

STATE {
    X  
    Y  
    Z  
    
}

INITIAL {
    rates()
    rates() ? To ensure correct initialisation.
    
    X = init_X
    
    Y = init_Y
    
    Z = init_Z
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    
}

DERIVATIVE states {
    rates()
    X' = rate_X 
    Y' = rate_Y 
    Z' = rate_Z 
    
}

PROCEDURE rates() {
    
    rate__R1 = (  compartment   *   vin  ) ? evaluable
    rate__R2 = ((  compartment   *   kout  ) *    X   ) ? evaluable
    rate__R3 = ((((((  ER   * 4.0) *   vM3  ) * (  k_CaA   ^   n  )) * ((   X    ^   n  ) / (((   X    ^   n  ) + (  k_CaA   ^   n  )) * ((   X    ^   n  ) + (  k_CaI   ^   n  ))))) * ((   Z    ^   m  ) / ((   Z    ^   m  ) + (  kip3   ^   m  )))) * (   Y    -    X   )) ? evaluable
    rate__R4 = ((  compartment   *   vM2  ) * ((   X    ^ 2.0) / ((   X    ^ 2.0) + (  k2   ^ 2.0)))) ? evaluable
    rate__R5 = ((  ER   *   kf  ) * (   Y    -    X   )) ? evaluable
    rate__R6 = ((  compartment   *   vp  ) * ((   X    ^ 2.0) / ((   X    ^ 2.0) + (  kp   ^ 2.0)))) ? evaluable
    rate__R7 = ((  compartment   *   kdeg  ) *    Z   ) ? evaluable
    rate_X = tscale  * (  rate__R1   -  rate__R2  +  rate__R3  -  rate__R4  +   rate__R5  ) /  compartment ? Note units of all quantities used here need to be consistent!
    rate_Y = tscale  * (-1*  rate__R3   +  rate__R4  -   rate__R5  ) /  ER ? Note units of all quantities used here need to be consistent!
    rate_Z = tscale  * (  rate__R6   -   rate__R7  ) /  compartment ? Note units of all quantities used here need to be consistent!
    
     
    
}

